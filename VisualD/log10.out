Program 1
{
	Stack: [{Ref(int) v1, {int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}}]
	Symbol Table: {}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [Ref(int) v1, {int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}]
	Symbol Table: {}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [Ref(int) v1, {int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}]
	Symbol Table: {}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}]
	Symbol Table: {v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}]
	Symbol Table: {v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}]
	Symbol Table: {v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}]
	Symbol Table: {v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}]
	Symbol Table: {cnt=0, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}]
	Symbol Table: {cnt=0, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 2
{
	Stack: [{acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 2
{
	Stack: [{acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 2
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 2
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{acquire(cnt), {print(rH(v1) - 1), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [{wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [{acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [{acquire(cnt), {print(rH(v1) - 1), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [{wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [{acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [{print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [{print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [print(rH(v1)), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [print(rH(v1)), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 2
{
	Stack: []
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [print(rH(v1)), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [print(rH(v1)), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 3
{
	Stack: []
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [{print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [print(rH(v1) - 1), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [print(rH(v1) - 1), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200, 199]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200, 199]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: []
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 200, 199]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{Ref(int) v1, {int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}}]
	Symbol Table: {}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [Ref(int) v1, {int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}]
	Symbol Table: {}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [Ref(int) v1, {int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}]
	Symbol Table: {}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}]
	Symbol Table: {v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}}]
	Symbol Table: {v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}]
	Symbol Table: {v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [int cnt, {new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}]
	Symbol Table: {v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [new(v1,1), {newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(0, int)}
	Output: []
	File table: {}
	Heap: {}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}}]
	Symbol Table: {cnt=0, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}]
	Symbol Table: {cnt=0, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [newCSemaphore(cnt, rH(v1)), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}]
	Symbol Table: {cnt=0, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {}
};
Program 1
{
	Stack: [{fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [fork({acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}), {fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 2
{
	Stack: [{acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 2
{
	Stack: [{acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 2
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [fork({acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}), {acquire(cnt), {print(rH(v1) - 1), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 2
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{acquire(cnt), {print(rH(v1) - 1), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [{wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [{acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [{acquire(cnt), {print(rH(v1) - 1), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [{wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [{acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [wH(v1, rH(v1) * 10), {print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=1}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [{print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [{print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [print(rH(v1)), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [print(rH(v1)), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: []
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 2
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [2]>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 2
{
	Stack: []
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [acquire(cnt), {print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
Program 1
{
	Stack: [{print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [{print(rH(v1) - 1), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [print(rH(v1) - 1), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [print(rH(v1) - 1), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 3
{
	Stack: [acquire(cnt), {wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [1]>}
};
Program 1
{
	Stack: []
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [wH(v1, rH(v1) * 10), {wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=10}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [wH(v1, rH(v1) * 2), {print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=100}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [{print(rH(v1)), release(cnt)}]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [print(rH(v1)), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [print(rH(v1)), release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: [release(cnt)]
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, [3]>}
};
Program 3
{
	Stack: []
	Symbol Table: {cnt=1, v1=RefValue(1, int)}
	Output: [10, 9, 200]
	File table: {}
	Heap: {1=200}
	Procedures: {}
	Lock table: {}
	Barrier table: {}
	Latch table: {}
	Count Semaphore table: {1=<1, []>}
};
